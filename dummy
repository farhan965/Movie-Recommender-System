import pandas as pd

import pyodbc

import struct

import os

import numpy as np

from azure import identity

from dotenv import load_dotenv

from azure.storage.blob import BlobServiceClient

from io import BytesIO

from master_combined_function_f5 import process_data

from fuzzy_match_preprocessing_functions_f2 import preprocess_source_df

import time
 
 
class GetSqlConnection:

    def __init__(self, conn_string):

        self.conn_string = conn_string

    def get_azure_identity(self):

                      return struct.pack(f"<I{len(token_bytes)}s", len(token_bytes), token_bytes)

    def get_conn(self):  # pragma: no cover

                # return pyodbc.connect(self.conn_string)

        if "Encrypt=yes;TrustServerCertificate=no" not in self.conn_string:

            return pyodbc.connect(self.conn_string)

        else:

            return pyodbc.connect(

                self.conn_string, attrs_before={SQL_COPT_SS_ACCESS_TOKEN: token_struct}

            )
 
load_dotenv()

My_inst = GetSqlConnection(os.environ.get("dev_connection_string"))

dev_conn = My_inst.get_conn()

cursor = dev_conn.cursor()

print(dev_conn)
 
 
blob_connection_string = os.environ.get("blob_connection_string")
 
# Create BlobServiceClient

blob_service_client = BlobServiceClient.from_connection_string(blob_connection_string)
 
# Define container name

container_name = "input"
 
# Get ContainerClient

container_client = blob_service_client.get_container_client(container_name)
 
 
def get_SC_Match_objects():

    df_sc_emails = pd.read_sql(

        "Select * From Staging.Mapping_Table_Sales", dev_conn

    )

    df_sc_emails = df_sc_emails.astype(str)

    df_sc_CRD = pd.read_sql(

        "Select * From Staging.Mapping_Table_Sales", dev_conn

    )

    df_sc_CRD = df_sc_CRD.astype(str)

    name_city_state_comp_sc_df = pd.read_sql(

        " SELECT * FROM CTE2",

        dev_conn,

    )

    name_city_state_comp_sc_df = name_city_state_comp_sc_df.astype(str)
 
    df_sc_emails = df_sc_emails.rename(columns={"CONTACT_ID": "Id"})

    df_sc_CRD = df_sc_CRD.rename(columns={"CONTACT_ID": "Id"})

    df_sc_emails = df_sc_emails.drop(columns=["RN"])

    df_sc_CRD = df_sc_CRD.drop(columns=["ID", ID"])
 
    return df_sc_emails, df_sc_CRD, name_city_state_comp_sc_df
 
 
start_time = time.time()
 
